/**
 * 稳健版：解锁知音漫客付费章节
 * 兼容 Surge / Loon / QuantumultX 的 http-response / script-response-body
 *
 * 要点：
 * - 对非 JSON、安全场景做判定并回退原始 body，避免卡死
 * - 确保任何分支都调用 $done()
 * - 对 obj.data 做存在性检测后再赋值
 */

(function () {
  // 保底变量（不同平台兼容）
  const reqUrl = ($request && $request.url) ? $request.url : "";
  const respBody = ($response && typeof $response.body === "string") ? $response.body : "";

  // 如果没有响应 body 或 没有 URL，直接回传原始（安全）
  if (!reqUrl || !respBody) {
    $done({ body: respBody || "" });
    return;
  }

  // 简单检查 Content-Type（若可用），避免解析图片/二进制/HTML
  // 在某环境中 $response.headers 可能不可用，故用 try 包裹
  try {
    const headers = $response && $response.headers ? $response.headers : null;
    if (headers && headers["Content-Type"]) {
      const ct = headers["Content-Type"].toLowerCase();
      if (!ct.includes("application/json") && !ct.includes("text/json")) {
        // 非 JSON 类型，直接返回原始 body
        $done({ body: respBody });
        return;
      }
    }
  } catch (e) {
    // header 检查失败也不阻断，继续尝试解析
  }

  // 解析并处理（安全 try/catch）
  try {
    let obj = JSON.parse(respBody);

    // 确保是对象
    if (obj === null || typeof obj !== "object") {
      $done({ body: respBody });
      return;
    }

    // --- 处理用户信息接口 ---
    // 仅在 URL 包含 getuserinfo 或 类似关键字时注入 VIP
    if (/getuserinfo|user\/v\d+\/info|user\/info/i.test(reqUrl)) {
      // 确保 data 存在
      if (!obj.data || typeof obj.data !== "object") obj.data = {};

      // 注入/覆盖安全字段
      obj.data.isvip = 1;
      obj.data.vip = 1;
      obj.data.vipdays = obj.data.vipdays || 9999;
      obj.data.vipdate = obj.data.vipdate || 1;
      obj.data.Uviptime = obj.data.Uviptime || obj.data.vipExpire || 32503680000000; // year 3000-ish
      obj.data.end_time = obj.data.end_time || obj.data.vip_end || "2099-12-31";
      obj.data.Uname = obj.data.Uname || obj.data.username || obj.data.nickname || "VIP用户";
      obj.data.nickname = obj.data.nickname || obj.data.Uname;
      obj.data.headpic = obj.data.headpic || obj.data.avatar || "https://zdimg.lifeweek.com.cn/app/20240614/17183119665002415.jpg";
      obj.data.Cgold = obj.data.Cgold || obj.data.coins || 999999;
      obj.data.coins = obj.data.coins || obj.data.Cgold || 999999;
      obj.data.Ulevel = obj.data.Ulevel || obj.data.level || 20;

      $done({ body: JSON.stringify(obj) });
      return;
    }

    // --- 处理付费章节接口 ---
    if (/paychapters|chapterAuth|chapter\/auth|buyChapter|purchase|userpurchased/i.test(reqUrl)) {
      // 标准化表示成功/无需付费的字段
      if (typeof obj === "object") {
        if ("status" in obj) obj.status = 0;
        if ("code" in obj) obj.code = 0;
        if ("errcode" in obj) obj.errcode = 0;
        if ("errno" in obj) obj.errno = 0;
        if ("message" in obj) obj.message = obj.message || "ok";
      }

      // 处理 data 容器
      if (!obj.data || typeof obj.data !== "object") obj.data = {};

      // 如果存在章节数组，逐项解锁
      const chFields = ["chapters", "list", "items"];
      let found = false;
      for (const f of chFields) {
        if (Array.isArray(obj.data[f])) {
          obj.data[f] = obj.data[f].map(ch => {
            if (ch && typeof ch === "object") {
              ch.is_locked = 0;
              ch.lock = 0;
              ch.price = 0;
              ch.is_buy = 1;
            }
            return ch;
          });
          found = true;
        }
      }
      if (!found) {
        // 没有数组则直接写常见字段
        obj.data.is_locked = 0;
        obj.data.price = 0;
        obj.data.is_buy = 1;
      }

      $done({ body: JSON.stringify(obj) });
      return;
    }

    // 若不匹配以上接口，则原样返回（避免误伤）
    $done({ body: respBody });
    return;

  } catch (err) {
    // 出现解析或运行异常，记录并回退原始响应，**务必调用 $done**！
    // 在某些平台 console.log 可见，某些平台不可见但仍尝试打印
    try { console.log("[Zymk fix] error:", err && err.message ? err.message : err); } catch (e) {}
    $done({ body: respBody });
    return;
  }
})();
